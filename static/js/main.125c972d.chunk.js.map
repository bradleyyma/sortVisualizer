{"version":3,"sources":["logo.svg","components/sample.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Sample","handleNewSample","length","max","sample","createNewSample","console","log","setState","bubbleSort","update_speed","state","bars","document","getElementsByClassName","len","counter","i","j","b1","b2","setTimeout","compare","parseInt","dataset","value","swap","classList","remove","insertionSort","values","curr_bar","othr_bar","tmp","handleSort","type","Array","from","Math","floor","random","bar1","bar2","add","temp_value","temp_height","style","height","Fragment","className","this","map","v","index","key","width","data-value","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,mKCqI5BC,G,wDAlIb,aAAe,IAAD,8BACZ,gBAeFC,gBAAkB,SAACC,EAAQC,GACzB,IAAIC,EAAS,EAAKC,gBAAgBH,EAAQC,GAC1CG,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CAAEJ,YAnBJ,EAqCdK,WAAa,WAKX,IAJA,IAAMC,EAAe,EAAKC,MAAMD,aAC5BE,EAAOC,SAASC,uBAAuB,OACvCC,EAAM,EAAKJ,MAAMT,OACjBc,EAAU,EACLC,EAAI,EAAGA,EAAIF,EAAKE,IACvB,IAD6B,IAAD,WACnBC,GACP,IAAMC,EAAKP,EAAKM,GACVE,EAAKR,EAAKM,EAAI,GACpBG,YACE,kBAAM,EAAKC,QAAQH,EAAIC,EAAIJ,KAC3BN,EAAeM,KAEjBK,YAAW,WACLE,SAASJ,EAAGK,QAAQC,OAASF,SAASH,EAAGI,QAAQC,SACnD,EAAKC,KAAKP,EAAIC,GACdJ,OAEDN,EAAeM,GAElBK,YAAW,WACTF,EAAGQ,UAAUC,OAAO,aAEnBlB,EAAeM,MAjBXE,EAAI,EAAGA,EAAIH,EAAME,EAAGC,IAAM,EAA1BA,IA3CC,EAiEdW,cAAgB,WAMd,IALA,IACIjB,EAAOC,SAASC,uBAAuB,OACvCgB,EAAM,YAAO,EAAKnB,MAAMP,QACxBW,EAAM,EAAKJ,MAAMT,OACjBc,EAAU,EACLC,EAAI,EAAGA,EAAIF,EAAKE,IACvB,IAAK,IAAIC,EAAID,EAAI,EAAGC,GAAK,EAAGA,IACrBY,EAAOZ,EAAE,GAAKY,EAAOZ,IAAI,WACxB,IAAMa,EAAWnB,EAAKM,EAAE,GAClBc,EAAWpB,EAAKM,GACtBG,YAAW,WACT,EAAKC,QAAQS,EAAUC,KAXd,KAYShB,GACpB,IAAIiB,EAAMH,EAAOZ,EAAE,GACnBY,EAAOZ,EAAE,GAAKY,EAAOZ,GACrBY,EAAOZ,GAAKe,EACZZ,YAAW,WACT,EAAKK,KAAKK,EAAUC,KAjBX,KAkBShB,GAXI,IAzEtB,EA0FdkB,WAAa,SAACC,GACZ,OAAQA,GACN,IAAK,SACH,EAAK1B,aACL,MACF,IAAK,YACH,EAAKoB,kBA9FT,EAAKlB,MAAQ,CACXT,OAAQ,GACRC,IAAK,IACLO,aAAc,KAEhB,EAAKC,MAAMP,OAAS,EAAKC,gBAAgB,EAAKM,MAAMT,OAAQ,EAAKS,MAAMR,KAP3D,E,4DAUED,EAAQC,GAEtB,OAAOiC,MAAMC,KAAK,CAAEnC,OAAQA,IAAU,kBACpCoC,KAAKC,MAAMD,KAAKE,UAAYrC,EAFlB,W,8BAWNsC,EAAMC,EAAM1B,GAElByB,EAAKd,UAAUgB,IAAI,WACnBD,EAAKf,UAAUgB,IAAI,a,2BAGhBF,EAAMC,GACT,IAAIE,EAAaH,EAAKjB,QAAQC,MAC1BoB,EAAcJ,EAAKK,MAAMC,OAC7BN,EAAKjB,QAAQC,MAAQiB,EAAKlB,QAAQC,MAClCiB,EAAKlB,QAAQC,MAAQmB,EACrBH,EAAKK,MAAMC,OAASL,EAAKI,MAAMC,OAC/BL,EAAKI,MAAMC,OAASF,I,+BAmEZ,IAAD,OACP,OACE,kBAAC,IAAMG,SAAP,KACE,yBAAKC,UAAU,SACZC,KAAKvC,MAAMP,OAAO+C,KAAI,SAACC,EAAGC,GAAJ,OACrB,yBACEC,IAAKD,EACLJ,UAAU,MACVH,MAAO,CAAEC,OAAQK,EAAI,IAAKG,MAAO,OACjCC,aAAYJ,QAIlB,4BACEK,QAAS,kBACP,EAAKxD,gBAAgB,EAAKU,MAAMT,OAAQ,EAAKS,MAAMR,OAFvD,cAOA,4BAAQsD,QAAS,kBAAM,EAAKvB,WAAW,YAAvC,eACA,4BAAQuB,QAAS,kBAAM,EAAKvB,WAAW,eAAvC,uB,GA3HawB,IAAMC,YCWZC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCIcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvD,SAASwD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvE,QAAQuE,MAAMA,EAAMC,c","file":"static/js/main.125c972d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./sample.css\";\r\nclass Sample extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      length: 50,\r\n      max: 100,\r\n      update_speed: 100,\r\n    };\r\n    this.state.sample = this.createNewSample(this.state.length, this.state.max);\r\n  }\r\n\r\n  createNewSample(length, max) {\r\n    const min = 5;\r\n    return Array.from({ length: length }, () =>\r\n      Math.floor(Math.random() * (max - min) + min)\r\n    );\r\n  }\r\n  handleNewSample = (length, max) => {\r\n    let sample = this.createNewSample(length, max);\r\n    console.log(sample);\r\n    this.setState({ sample });\r\n  };\r\n\r\n  compare(bar1, bar2, counter) {\r\n    //color cues for comparing\r\n    bar1.classList.add(\"compare\");\r\n    bar2.classList.add(\"compare\");\r\n  }\r\n\r\n  swap(bar1, bar2) {\r\n    let temp_value = bar1.dataset.value;\r\n    let temp_height = bar1.style.height;\r\n    bar1.dataset.value = bar2.dataset.value;\r\n    bar2.dataset.value = temp_value;\r\n    bar1.style.height = bar2.style.height;\r\n    bar2.style.height = temp_height;\r\n  }\r\n\r\n  bubbleSort = () => {\r\n    const update_speed = this.state.update_speed;\r\n    let bars = document.getElementsByClassName(\"bar\");\r\n    let len = this.state.length;\r\n    let counter = 1;\r\n    for (let i = 1; i < len; i++) {\r\n      for (let j = 0; j < len - i; j++) {\r\n        const b1 = bars[j];\r\n        const b2 = bars[j + 1];\r\n        setTimeout(\r\n          () => this.compare(b1, b2, counter),\r\n          update_speed * counter++\r\n        );\r\n        setTimeout(() => {\r\n          if (parseInt(b1.dataset.value) > parseInt(b2.dataset.value)) {\r\n            this.swap(b1, b2);\r\n            counter++;\r\n          }\r\n        }, update_speed * counter);\r\n\r\n        setTimeout(() => {\r\n          b1.classList.remove(\"compare\");\r\n          // b2.classList.remove('compare');\r\n        }, update_speed * counter++);\r\n      }\r\n    }\r\n  };\r\n\r\n  insertionSort = () => {\r\n    const update_speed = 30;\r\n    let bars = document.getElementsByClassName(\"bar\");\r\n    let values = [...this.state.sample]\r\n    let len = this.state.length;\r\n    let counter = 1;\r\n    for (let i = 1; i < len; i++) {\r\n      for (let j = i - 1; j >= 0; j--) {\r\n          if(values[j+1] < values[j]){\r\n              const curr_bar = bars[j+1]\r\n              const othr_bar = bars[j]\r\n              setTimeout(() => {\r\n                this.compare(curr_bar, othr_bar);\r\n              }, update_speed * ++counter);\r\n              let tmp = values[j+1]\r\n              values[j+1] = values[j]\r\n              values[j] = tmp\r\n              setTimeout(() => {\r\n                this.swap(curr_bar, othr_bar)\r\n              }, update_speed * ++counter);\r\n          }\r\n      }\r\n    }\r\n  };\r\n\r\n  handleSort = (type) => {\r\n    switch (type) {\r\n      case \"bubble\":\r\n        this.bubbleSort();\r\n        break;\r\n      case \"insertion\":\r\n        this.insertionSort();\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"graph\">\r\n          {this.state.sample.map((v, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"bar\"\r\n              style={{ height: v + \"%\", width: \"1vh\" }}\r\n              data-value={v}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <button\r\n          onClick={() =>\r\n            this.handleNewSample(this.state.length, this.state.max)\r\n          }\r\n        >\r\n          New Sample\r\n        </button>\r\n        <button onClick={() => this.handleSort(\"bubble\")}>Bubble Sort</button>\r\n        <button onClick={() => this.handleSort(\"insertion\")}>\r\n          Insertion Sort\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sample;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Sample from './components/sample'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sample />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}