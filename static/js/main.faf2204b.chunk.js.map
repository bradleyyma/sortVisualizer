{"version":3,"sources":["logo.svg","components/helpers.jsx","components/sample.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","compare","bar1","bar2","classList","add","swap","tmp1","cloneNode","tmp2","dataset","value","style","height","createNewSample","length","max","Array","from","Math","floor","random","Sample","handleNewSample","sample","helper","setState","bubbleSort","update_speed","state","bars","document","getElementsByClassName","values","len","counter","i","flag","j","b1","b2","setTimeout","temp","remove","end_bar","insertionSort","curr_bar","othr_bar","tmp","mergeSort","mergeSortHelper","start","end","half","l","r","end_left","merge_index","barl","barr","r_value","update_time","console","log","quickSort","quickSortHelper","pivot","pivot_bar","swap_index","partition","bar","handleSort","type","btns","childNodes","sorted","sort","a","b","disabled","time_after","handleSize","event","target","Fragment","className","this","map","v","index","key","width","data-value","id","onClick","color","min","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.faf2204b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function compare(bar1, bar2) {\r\n  //color cues for comparing\r\n  bar1.classList.add(\"compare\");\r\n  bar2.classList.add(\"compare\");\r\n}\r\n\r\nexport function swap(bar1, bar2) {\r\n  let tmp1 = bar1.cloneNode(true);\r\n  let tmp2 = bar2.cloneNode(true);\r\n  bar1.dataset.value = tmp2.dataset.value;\r\n  bar2.dataset.value = tmp1.dataset.value;\r\n  bar1.style.height = tmp2.style.height;\r\n  bar2.style.height = tmp1.style.height;\r\n  bar1.classList = tmp2.classList;\r\n  bar2.classList = tmp1.classList;\r\n}\r\n\r\nexport function createNewSample(length, max) {\r\n  const min = 5;\r\n  return Array.from({ length: length }, () =>\r\n    Math.floor(Math.random() * (max - min) + min)\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./sample.css\";\r\nimport * as helper from \"./helpers.jsx\";\r\n\r\nclass Sample extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      length: 70,\r\n      max: 100,\r\n      update_speed: 10,\r\n    };\r\n    const sample = helper.createNewSample(this.state.length, this.state.max);\r\n    this.state.sample = sample;\r\n    this.state.sorted = [...sample].sort(function (a, b) {\r\n      return a - b;\r\n    });\r\n    // this.state.sample = [20, 95, 42, 45, 12];\r\n  }\r\n\r\n  handleNewSample = (length, max) => {\r\n    let sample = helper.createNewSample(length, max);\r\n    this.setState({ sample });\r\n  };\r\n  bubbleSort = () => {\r\n    const update_speed = this.state.update_speed;\r\n    let bars = document.getElementsByClassName(\"bar\");\r\n    let values = [...this.state.sample];\r\n    let len = this.state.length;\r\n    let counter = 0;\r\n\r\n    for (let i = 1; i < len; i++) {\r\n      let flag = false;\r\n      for (let j = 0; j < len - i; j++) {\r\n        const b1 = bars[j];\r\n        const b2 = bars[j + 1];\r\n        setTimeout(() => helper.compare(b1, b2), update_speed * counter);\r\n        if (values[j] > values[j + 1]) {\r\n          flag = true;\r\n          setTimeout(() => {\r\n            helper.swap(b1, b2);\r\n          }, update_speed * ++counter);\r\n          let temp = values[j];\r\n          values[j] = values[j + 1];\r\n          values[j + 1] = temp;\r\n        }\r\n        setTimeout(() => {\r\n          b1.classList.remove(\"compare\");\r\n          // b2.classList.remove('compare');\r\n        }, update_speed * ++counter);\r\n      }\r\n      if (flag === false) {\r\n        return counter;\r\n      }\r\n      let end_bar = bars[len - i];\r\n      setTimeout(() => {\r\n        end_bar.classList.add(\"final\");\r\n      }, update_speed * counter);\r\n    }\r\n    return counter;\r\n  };\r\n\r\n  insertionSort = () => {\r\n    const update_speed = this.state.update_speed;\r\n    let bars = document.getElementsByClassName(\"bar\");\r\n    let values = [...this.state.sample];\r\n    let len = this.state.length;\r\n    let counter = 0;\r\n    for (let i = 0; i < len; i++) {\r\n      let j;\r\n      for (j = i - 1; j >= 0; j--) {\r\n        let curr_bar = bars[j + 1];\r\n        if (values[j + 1] < values[j]) {\r\n          let othr_bar = bars[j];\r\n          setTimeout(() => {\r\n            curr_bar.classList.add(\"selected\");\r\n          }, update_speed * ++counter);\r\n          let tmp = values[j + 1];\r\n          values[j + 1] = values[j];\r\n          values[j] = tmp;\r\n          setTimeout(() => {\r\n            helper.swap(curr_bar, othr_bar);\r\n          }, update_speed * ++counter);\r\n        } else break;\r\n      }\r\n      let end_bar = bars[j + 1];\r\n      setTimeout(() => {\r\n        end_bar.classList.add(\"final\");\r\n      }, update_speed * counter);\r\n    }\r\n    return counter;\r\n  };\r\n\r\n  mergeSort = () => {\r\n    const update_speed = this.state.update_speed;\r\n    let bars = document.getElementsByClassName(\"bar\");\r\n    let values = [...this.state.sample];\r\n    let counter = 0;\r\n\r\n    function mergeSortHelper(start, end) {\r\n      // end is non-inclusive\r\n      let length = end - start;\r\n      if (length === 1) {\r\n        return;\r\n      }\r\n      let half = start + Math.floor(length / 2);\r\n      mergeSortHelper(start, half);\r\n      mergeSortHelper(half, end);\r\n      let l = start;\r\n      let r = half;\r\n      let end_left = half;\r\n      let merge_index = start;\r\n      while (l < end_left && r < end) {\r\n        const barl = bars[l];\r\n        const barr = bars[r];\r\n        let height;\r\n        setTimeout(() => {\r\n          helper.compare(barl, barr);\r\n          height = barr.style.height;\r\n        }, update_speed * ++counter);\r\n        setTimeout(() => {\r\n          barl.classList.remove(\"compare\");\r\n          barr.classList.remove(\"compare\");\r\n        }, update_speed * ++counter);\r\n        if (values[l] <= values[r]) {\r\n          l++;\r\n        } else {\r\n          let r_value = values[r];\r\n          let bar1 = bars[merge_index];\r\n          // let height = barr.style.height\r\n          let update_time = update_speed * ++counter;\r\n          for (let i = r - 1; i >= merge_index; i--) {\r\n            values[i + 1] = values[i];\r\n            setTimeout(() => {\r\n              bars[i + 1].style.height = bars[i].style.height;\r\n            }, update_time);\r\n            //html shift\r\n          }\r\n\r\n          setTimeout(() => {\r\n            bar1.style.height = height;\r\n          }, update_time);\r\n\r\n          values[merge_index] = r_value;\r\n          l++;\r\n          end_left++;\r\n          r++;\r\n        }\r\n\r\n        merge_index++;\r\n      }\r\n      return;\r\n    }\r\n\r\n    mergeSortHelper(0, this.state.length);\r\n    console.log(values);\r\n    return counter;\r\n  };\r\n\r\n  quickSort = () => {\r\n    const update_speed = this.state.update_speed;\r\n    let bars = document.getElementsByClassName(\"bar\");\r\n    let values = [...this.state.sample];\r\n    let counter = 0;\r\n    function partition(values, bars, start, end) {\r\n      let pivot = values[end - 1];\r\n      let pivot_bar = bars[end - 1];\r\n      setTimeout(() => {\r\n        pivot_bar.classList.add(\"selected\");\r\n      }, counter * update_speed);\r\n      let swap_index = start;\r\n      for (let j = start; j < end - 1; j++) {\r\n        let bar1 = bars[j];\r\n        let bar2 = bars[swap_index];\r\n        setTimeout(() => {\r\n          helper.compare(bar1, bar2);\r\n        }, ++counter * update_speed);\r\n        if (values[j] <= pivot) {\r\n          let tmp = values[j];\r\n          values[j] = values[swap_index];\r\n          values[swap_index] = tmp;\r\n          setTimeout(() => helper.swap(bar1, bar2), ++counter * update_speed);\r\n          swap_index++;\r\n          setTimeout(() => {\r\n            bar1.classList.remove(\"compare\");\r\n            bar2.classList.remove(\"compare\");\r\n          }, update_speed * ++counter);\r\n        } else {\r\n          setTimeout(() => {\r\n            bar1.classList.remove(\"compare\");\r\n          }, update_speed * ++counter);\r\n        }\r\n      }\r\n      let tmp = values[end - 1];\r\n      values[end - 1] = values[swap_index];\r\n      values[swap_index] = tmp;\r\n\r\n      let b2 = bars[swap_index];\r\n\r\n      setTimeout(() => {\r\n        helper.swap(pivot_bar, b2);\r\n      }, ++counter * update_speed);\r\n\r\n      setTimeout(() => {\r\n        b2.classList.add(\"final\");\r\n      }, ++counter * update_speed);\r\n      // console.log(values, pivot, start, end)\r\n      console.log(values);\r\n      return swap_index;\r\n    }\r\n    function quickSortHelper(start, end) {\r\n      let length = end - start;\r\n      if (length === 0) {\r\n        return;\r\n      }\r\n      if (length === 1) {\r\n        let bar = bars[start];\r\n        setTimeout(() => {\r\n          bar.classList.add(\"final\");\r\n        }, counter * update_speed);\r\n        return;\r\n      }\r\n      let pivot = partition(values, bars, start, end);\r\n\r\n      quickSortHelper(start, pivot);\r\n      quickSortHelper(pivot + 1, end);\r\n    }\r\n    quickSortHelper(0, this.state.length);\r\n    return counter;\r\n  };\r\n\r\n  handleSort = (type) => {\r\n    let btns = document.getElementsByClassName(\"menu\")[0].childNodes;\r\n    let bars = document.getElementsByClassName(\"graph\")[0].childNodes;\r\n    const sorted = [...this.state.sample].sort(function (a, b) {\r\n      return a - b;\r\n    });\r\n    for (let i = 0; i < btns.length; i++) {\r\n      btns[i].disabled = true;\r\n    }\r\n    var counter;\r\n    switch (type) {\r\n      case \"bubble\":\r\n        counter = this.bubbleSort();\r\n        break;\r\n      case \"insertion\":\r\n        counter = this.insertionSort();\r\n        break;\r\n      case \"merge\":\r\n        counter = this.mergeSort();\r\n        break;\r\n      case \"quick\":\r\n        counter = this.quickSort();\r\n        break;\r\n    }\r\n    let time_after = counter * this.state.update_speed;\r\n    setTimeout(() => {\r\n      for (let bar of bars) {\r\n        bar.classList = \"pass bar\";\r\n      }\r\n      setTimeout(() => {\r\n        for (let bar of bars) {\r\n          bar.classList = \"bar\";\r\n        }\r\n        for (let i = 0; i < btns.length; i++) {\r\n          btns[i].disabled = false;\r\n        }\r\n        this.setState({ sample: sorted });\r\n      }, 1000);\r\n    }, time_after);\r\n  };\r\n\r\n  handleSize = (event) => {\r\n    const length = event.target.value;\r\n    const a = 1600;\r\n    const b = 0.94;\r\n    this.setState(\r\n      {\r\n        length: length,\r\n        sample: helper.createNewSample(length, this.state.max),\r\n        update_speed: a * b ** length,\r\n      },\r\n      console.log(this.state.update_speed)\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Sorting Visualizer</h1>\r\n        <div className=\"graph\">\r\n          {this.state.sample.map((v, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"bar\"\r\n              style={{ height: v + \"%\", width: 100 / this.state.length + \"%\" }}\r\n              data-value={v}\r\n              id={index}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"menu\">\r\n          <button\r\n            className=\"sortbtn\"\r\n            onClick={() =>\r\n              this.handleNewSample(this.state.length, this.state.max)\r\n            }\r\n          >\r\n            New Sample\r\n          </button>\r\n          <button className=\"sortbtn\" onClick={() => this.handleSort(\"bubble\")}>\r\n            Bubble Sort\r\n          </button>\r\n          <button\r\n            className=\"sortbtn\"\r\n            onClick={() => this.handleSort(\"insertion\")}\r\n          >\r\n            Insertion Sort\r\n          </button>\r\n          <button className=\"sortbtn\" onClick={() => this.handleSort(\"merge\")}>\r\n            Merge Sort\r\n          </button>\r\n          <button className=\"sortbtn\" onClick={() => this.handleSort(\"quick\")}>\r\n            Quick Sort\r\n          </button>\r\n\r\n          <p style={{ color: \"white\" }}>Size/Speed</p>\r\n          <input\r\n            type=\"range\"\r\n            min=\"5\"\r\n            max=\"100\"\r\n            value={this.state.length}\r\n            onChange={this.handleSize}\r\n            className=\"slider\"\r\n          />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sample;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Sample from \"./components/sample\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"App\">\n        <Sample />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}