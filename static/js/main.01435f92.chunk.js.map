{"version":3,"sources":["logo.svg","components/helpers.jsx","components/sample.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","compare","bar1","bar2","classList","add","swap","temp_value","dataset","value","temp_height","style","height","createNewSample","length","max","Array","from","Math","floor","random","Sample","handleNewSample","sample","helper","setState","sorted","sort","a","b","bubbleSort","update_speed","state","bars","document","getElementsByClassName","values","len","counter","i","flag","j","b1","b2","setTimeout","temp","remove","insertionSort","curr_bar","othr_bar","tmp","mergeSort","mergeSortHelper","start","end","half","l","r","end_left","merge_index","barl","barr","r_value","update_time","console","log","handleSort","type","btns","disabled","time_after","bar","Fragment","className","this","map","v","index","key","width","data-value","id","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.01435f92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function compare(bar1, bar2) {\r\n  //color cues for comparing\r\n  bar1.classList.add(\"compare\");\r\n  bar2.classList.add(\"compare\");\r\n}\r\n\r\nexport function swap(bar1, bar2) {\r\n  let temp_value = bar1.dataset.value;\r\n  let temp_height = bar1.style.height;\r\n  bar1.dataset.value = bar2.dataset.value;\r\n  bar2.dataset.value = temp_value;\r\n  bar1.style.height = bar2.style.height;\r\n  bar2.style.height = temp_height;\r\n}\r\n\r\nexport function createNewSample(length, max) {\r\n   const min = 5;\r\n   return Array.from({ length: length }, () =>\r\n     Math.floor(Math.random() * (max - min) + min)\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport \"./sample.css\";\r\nimport * as helper from \"./helpers.jsx\";\r\n\r\nclass Sample extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      length: 50,\r\n      max: 100,\r\n      update_speed: 10,\r\n    };\r\n    const sample = helper.createNewSample(this.state.length, this.state.max);\r\n    this.state.sample = sample;\r\n    this.state.sorted = [...sample].sort(function (a, b) {\r\n      return a - b;\r\n    });\r\n    // this.state.sample = [20, 95, 42, 45, 12];\r\n  }\r\n\r\n  handleNewSample = (length, max) => {\r\n    let sample = helper.createNewSample(length, max);\r\n    this.setState({\r\n      sample: sample,\r\n      sorted: [...sample].sort(function (a, b) {\r\n        return a - b;\r\n      }),\r\n    });\r\n  };\r\n  bubbleSort = () => {\r\n    const update_speed = this.state.update_speed;\r\n    let bars = document.getElementsByClassName(\"bar\");\r\n    let values = [...this.state.sample];\r\n    let len = this.state.length;\r\n    let counter = 0;\r\n\r\n    for (let i = 1; i < len; i++) {\r\n      let flag = false;\r\n      for (let j = 0; j < len - i; j++) {\r\n        const b1 = bars[j];\r\n        const b2 = bars[j + 1];\r\n        setTimeout(() => helper.compare(b1, b2), update_speed * ++counter);\r\n        if (values[j] > values[j + 1]) {\r\n          flag = true;\r\n          setTimeout(() => {\r\n            helper.swap(b1, b2);\r\n          }, update_speed * ++counter);\r\n          let temp = values[j];\r\n          values[j] = values[j + 1];\r\n          values[j + 1] = temp;\r\n        }\r\n        setTimeout(() => {\r\n          b1.classList.remove(\"compare\");\r\n          // b2.classList.remove('compare');\r\n        }, update_speed * ++counter);\r\n      }\r\n      if (flag === false) {\r\n        return counter;\r\n      }\r\n    }\r\n    return counter;\r\n  };\r\n\r\n  insertionSort = () => {\r\n    const update_speed = this.state.update_speed;\r\n    let bars = document.getElementsByClassName(\"bar\");\r\n    let values = [...this.state.sample];\r\n    let len = this.state.length;\r\n    let counter = 0;\r\n    for (let i = 1; i < len; i++) {\r\n      for (let j = i - 1; j >= 0; j--) {\r\n        if (values[j + 1] < values[j]) {\r\n          let curr_bar = bars[j+1];\r\n          let othr_bar = bars[j];\r\n          setTimeout(() => {\r\n            helper.compare(curr_bar, othr_bar);\r\n          }, update_speed * ++counter);\r\n          let tmp = values[j + 1];\r\n          values[j + 1] = values[j];\r\n          values[j] = tmp;\r\n          setTimeout(() => {\r\n            helper.swap(curr_bar, othr_bar);\r\n          }, update_speed * ++counter);\r\n        }\r\n      }\r\n    }\r\n    return counter;\r\n  };\r\n\r\n  mergeSort = () => {\r\n    const update_speed = this.state.update_speed;\r\n    let bars = document.getElementsByClassName(\"bar\");\r\n    let values = [...this.state.sample];\r\n    let counter = 0;\r\n\r\n    function mergeSortHelper(start, end) {\r\n      // end is non-inclusive\r\n      let length = end - start;\r\n      if (length === 1) {\r\n        return;\r\n      }\r\n      let half = start + Math.floor(length / 2);\r\n      mergeSortHelper(start, half);\r\n      mergeSortHelper(half, end);\r\n      let l = start;\r\n      let r = half;\r\n      let end_left = half;\r\n      let merge_index = start;\r\n      while (l < end_left && r < end) {\r\n        const barl = bars[l];\r\n        const barr = bars[r];\r\n        let height;\r\n        setTimeout(() => {\r\n          helper.compare(barl, barr);\r\n          height = barr.style.height;\r\n        }, update_speed * ++counter);\r\n\r\n        setTimeout(() => {\r\n          barl.classList.remove(\"compare\");\r\n          barr.classList.remove(\"compare\");\r\n        }, update_speed * ++counter);\r\n\r\n        if (values[l] <= values[r]) {\r\n          l++;\r\n        } else {\r\n          let r_value = values[r];\r\n          let bar1 = bars[merge_index];\r\n          // let height = barr.style.height\r\n          let update_time = update_speed * ++counter;\r\n          for (let i = r - 1; i >= merge_index; i--) {\r\n            values[i + 1] = values[i];\r\n            setTimeout(() => {\r\n              bars[i + 1].style.height = bars[i].style.height;\r\n            }, update_time);\r\n            //html shift\r\n          }\r\n\r\n          setTimeout(() => {\r\n            bar1.style.height = height;\r\n          }, update_time);\r\n\r\n          values[merge_index] = r_value;\r\n          l++;\r\n          end_left++;\r\n          r++;\r\n        }\r\n\r\n        merge_index++;\r\n      }\r\n      return;\r\n    }\r\n\r\n    mergeSortHelper(0, this.state.length);\r\n    console.log(values);\r\n    return counter;\r\n  };\r\n\r\n  handleSort = (type) => {\r\n    let btns = document.getElementsByClassName(\"sortbtn\");\r\n    let bars = document.getElementsByClassName(\"bar\");\r\n    for (let i = 0; i < btns.length; i++) {\r\n      btns[i].disabled = true;\r\n    }\r\n    var counter;\r\n    switch (type) {\r\n      case \"bubble\":\r\n        counter = this.bubbleSort();\r\n        break;\r\n      case \"insertion\":\r\n        counter = this.insertionSort();\r\n        break;\r\n      case \"merge\":\r\n        counter = this.mergeSort();\r\n    }\r\n    let time_after = counter * this.state.update_speed;\r\n    setTimeout(() => {\r\n      for (let bar of bars) {\r\n        bar.classList.remove(\"compare\");\r\n        bar.classList.add(\"pass\");\r\n      }\r\n      setTimeout(() => {\r\n        for (let bar of bars) {\r\n          bar.classList.remove(\"pass\");\r\n        }\r\n        for (let i = 0; i < btns.length; i++) {\r\n          btns[i].disabled = false;\r\n        }\r\n        this.setState({ sample: [...this.state.sorted] });\r\n      }, 1000);\r\n    }, time_after);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"graph\">\r\n          {this.state.sample.map((v, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"bar\"\r\n              style={{ height: v + \"%\", width: 100 / this.state.length + \"%\" }}\r\n              data-value={v}\r\n              id={index}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <button\r\n          className=\"sortbtn\"\r\n          onClick={() =>\r\n            this.handleNewSample(this.state.length, this.state.max)\r\n          }\r\n        >\r\n          New Sample\r\n        </button>\r\n        <button className=\"sortbtn\" onClick={() => this.handleSort(\"bubble\")}>\r\n          Bubble Sort\r\n        </button>\r\n        <button\r\n          className=\"sortbtn\"\r\n          onClick={() => this.handleSort(\"insertion\")}\r\n        >\r\n          Insertion Sort\r\n        </button>\r\n        <button className=\"sortbtn\" onClick={() => this.handleSort(\"merge\")}>\r\n          Merge Sort\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sample;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Sample from './components/sample'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sample />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}